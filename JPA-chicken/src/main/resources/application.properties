spring.application.name=JPA-chicken

server.port = 9091

#데이터베이스 테이블을 자동으로 생성해주는 설정
spring.jpa.hibernate.ddl-auto=update
                    #ddl : CREATE, DROP 테이블이나 계정 생성, 삭제
                    #ddl-auto=
                    #1)       create		 : 기존 테이블을 지우고 매번 테이블을 새로 생성
                    #2)       create-drop	 : application을 run 할 때만 테이블이 존재
                    #3)       validate		 : 테이블을 생성하거나 수정하지 않고,
                    #                          테이블이 정상적으로 SQL과 연동되었는지 검사
                    #                          만약에 테이블이 존재하지 않거나 컬럼이 존재하지 않으면 예외를 발생시키면서 종료
                    #4)       update		 : 만약 테이블이 존재하지 않다면 생성
                    #                          기존 테이블이 존재하고, 테이블 컬럼에 변동이 있다면 컬럼을 수정
                    #5)       none			 : 위 4가지 경우를 제외한 모든 경우
#DDL (Data Definition Language) : CREATE, DROP, ALTER, RENAME, TRUNCATE
#     데이터 정의
#DCL (Data Control Language) : GRANT, REVOKE
#     데이터 
#DML (Data Manipulation Language) : INSERT, UPDATE, DELETE, SELECT
#     데이터 조작 
#DQL (Data Query Language) : SELECT

#데이터베이스 SQL이 어떻게 작동되는지 구문 보기
#SQL이 자동으로 생성이 되고, 쿼리가 실행이 잘 되는지 보는 설정
spring.jpa.show-sql=true
#JPA로 만들어진 쿼리가 보임



#DBConfig를 설정했을 때 작성하는 설정
spring.datasource.url=jdbc:mysql://localhost:3306/KH_WORKBOOK
spring.datasource.username=root
spring.datasource.password=kh1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

##DBConfig를 hikari를 이용해서 DB연결
##spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/KH_WORKBOOK
##spring.datasource.hikari.username=root
##spring.datasource.hikari.password=kh1234
##spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver